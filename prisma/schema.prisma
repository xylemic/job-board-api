generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// definition for allowed roles
enum Role {
  APPLICANT
  EMPLOYER
  ADMIN
}

// define the User model
model User {
  id             String    @id @default(cuid())  // unique ID generated by Prisma (e.g., 'ckasdo3e3...') 
  name           String                            // full name
  email          String    @unique                 // unique for login
  passwordHash   String                            // store hashed password only
  role           Role                              // user role (APP, EMPLOYER, ADMIN)
  phone          String?                           // optional phone number
  profilePicture String?                           // optional image URL
  bio            String?                           // optional short description (esp. for applicants)
  resumeUrl      String?                           // resume link (applicants only)
  companyId      String?                           // FK to Company (nullable â€” only for employers)
  position       String?                           // role in company (e.g., hr manager)

  isVerified     Boolean   @default(false)         // email verification flag
  isActive       Boolean   @default(true)          // manual deactivation flag
  lastLoginAt    DateTime?                         // tracks last time user logged in

  createdAt      DateTime  @default(now())         // created timestamp
  updatedAt      DateTime  @updatedAt              // auto-updates on change

  // relations
  company        Company?  @relation(fields : [companyId], references : [id])
  jobs           Job[]                             // jobs posted (if employer)
  applications   Application[]                     // applications submitted (if applicant)
}


model Company {
  id             String   @id @default(cuid())             // unique company ID
  name           String                                   // company name
  description    String                                   // short about section
  location       String                                   // e.g., lagos, nigeria
  website        String?                                  // optional company site
  logoUrl        String?                                  // optional image/logo link
  mission        String?                                  // optional purpose/values
  socialLinks    String?                                  // could be JSON or CSV of links
  isActive       Boolean  @default(true)                  // soft-delete support
  createdAt      DateTime @default(now())                 // created timestamp
  updatedAt      DateTime @updatedAt                      // auto-updates on change

  // relations
  users          User[]                                   // users managing this company
  jobs           Job[]                                    // jobs posted by this company
}


model Job {
  id               String     @id @default(cuid())          // unique job ID
  title            String                                  // e.g., "frontend developer"
  description      String                                  // full job description
  location         String                                  // e.g., remote, lagos, london
  jobType          String                                  // e.g., remote, on-site
  employmentType   String                                  // e.g., full-time, contract
  minSalary        Int?                                    // optional salary range
  maxSalary        Int?
  category         String                                  // e.g., engineering, design
  tags             String?                                // e.g., "react", "node.js"
  applicationQuota Int?                                    // optional limit

  isActive         Boolean    @default(true)               // manual visibility toggle
  expiresAt        DateTime?                               // optional auto-expiry

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // relations
  companyId        String
  company          Company    @relation(fields: [companyId], references: [id])

  postedById       String
  postedBy         User       @relation(fields: [postedById], references: [id])

  applications     Application[]                          // who has applied
}


model Application {
  id            String   @id @default(cuid())              // unique application ID
  resumeUrl     String?                                   // link to resume file
  coverLetter   String?                                   // optional cover letter
  status        String   @default("pending")              // "pending", "accepted", "rejected"

  appliedAt     DateTime @default(now())                  // when user applied
  updatedAt     DateTime @updatedAt                       // auto-updates on edits

  // relations
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  jobId         String
  job           Job      @relation(fields: [jobId], references: [id])
}



